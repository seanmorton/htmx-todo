package templates

import (
  "fmt"

  "github.com/seanmorton/todo-htmx/internal/domain"
)

templ Tasks(tasks []domain.Task, projects []domain.Project, filters map[string]any) {
  <select hx-get="/tasks/list" hx-trigger="change" hx-target="#taskList" name="project_id" autocomplete="off">
    <option value="">--</option>
    for _, project := range projects {
      if filters["project_id"] != nil && filters["project_id"] == project.Id {
        <option value={ fmt.Sprintf("%d", project.Id) } selected>{ project.Name }</option>
      } else {
        <option value={ fmt.Sprintf("%d", project.Id) }>{ project.Name }</option>
      }
    }
  </select>
  <button hx-get={ "/tasks/new" } hx-target="#taskForm">
    New Task
  </button>
  <hr />
  @TaskList(tasks)
  <div id="taskForm"></div>
}

templ TaskList(tasks []domain.Task) {
  <div id="taskList">
    for _, task := range tasks {
      @TaskRow(task)
    }
  </div>
}

templ TaskRow(task domain.Task) {
  <div id={ fmt.Sprintf("task-%d", task.Id) }>
    <div hx-get={ fmt.Sprintf("/tasks/%d", task.Id) }  hx-target="#taskForm">
      <h4>{task.Title}</h4>
    </div>
    if task.DueDate != nil {
      <p>Due: { task.DueDateStr() }</p>
    }
    if !task.Done() {
      <button
        hx-post={ fmt.Sprintf("/tasks/%d/complete", task.Id) }
        hx-on::after-request="this.parentElement.remove();"
      >✅</button>
    }
    <button
      hx-delete={ fmt.Sprintf("/tasks/%d", task.Id) }
      hx-confirm="Are you sure you want to delete this task?"
      hx-on::after-request="this.parentElement.remove();"
    >❌</button>
    <hr />
  </div>
}

templ TaskForm(task domain.Task, projects []domain.Project) {
  <div id="taskForm">
    <div class="overlay">
      if task.Id == 0 {
        <form
          hx-post="/tasks"
          hx-target="#taskList"
          hx-swap="beforeend"
          hx-on::after-request="document.getElementById('taskForm').innerHTML='';"
        >
          @TaskFields(task, projects)
          <button type="submit">Create</button>
          <br />
        </form>
      } else {
        <form
          hx-put={ fmt.Sprintf("/tasks/%d", task.Id) }
          hx-target={ fmt.Sprintf("#task-%d", task.Id) }
          hx-on::after-request="document.getElementById('taskForm').innerHTML='';"
        >
          @TaskFields(task, projects)
          <br />
          <button type="submit">Save</button>
        </form>
      }
      <button hx-on:click="document.getElementById('taskForm').innerHTML='';">Close</button>
    </div>
  </div>
}

templ TaskFields(task domain.Task, projects []domain.Project) {
    <label>Title</label>
    <input type="text" name="title" value={ task.Title } />

    <label>Project</label>
    <select name="projectId">
      <option value="">--</option>
      for _, project := range projects {
        if task.ProjectId != nil && *task.ProjectId == project.Id {
          <option value={ fmt.Sprintf("%d", project.Id) } selected>{ project.Name }</option>
        } else {
          <option value={ fmt.Sprintf("%d", project.Id) }>{ project.Name }</option>
        }
      }
    </select>

    <label>Description</label>
    if task.Description != nil {
      <input type="text" name="description" value={ *task.Description } />
    } else {
      <input type="text" name="description" />
    }

    <label>DueDate</label>
    if task.DueDate != nil {
      <input type="date" name="dueDate" value={ task.DueDateStr() } />
    } else {
      <input type="date" name="dueDate" />
    }
}
