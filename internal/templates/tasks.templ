package templates

import (
  "fmt"

  "github.com/seanmorton/todo-htmx/internal/domain"
)

templ Tasks(tasks []domain.Task, projects []domain.Project, filters map[string]any) {
  <form id="taskFilters">
    <select id="projectSelect" name="projectId" autocomplete="off" hx-on:change="onFilterChange()">
      <option value="">All Projects</option>
      for _, project := range projects {
        <option value={ fmt.Sprintf("%d", project.Id) }
          selected?={ filters["projectId"] != nil && filters["projectId"] == project.Id }
        >{ project.Name }</option>
      }
    </select>
    <input type="checkbox" name="completed" hx-on:change="onFilterChange()"></input>
    <label for="completed">Completed</label>
  </form>

  <button id="taskNew" hx-get={ fmt.Sprintf("/tasks/new?projectId=%d", filters["projectId"]) } hx-target="#taskForm">
    New Task
  </button>
  <hr />

  <div id="taskList" hx-get="/tasks/list" hx-trigger="taskChange from:body, taskFilterChange from:#taskFilters">
    @TaskRows(tasks)
  </div>

  <div id="taskForm"></div>

  <script>
    function onFilterChange() {
      const form = htmx.find("#taskFilters");
      const projectId = htmx.find("#taskFilters>select[name=projectId]").value;
      const completed = htmx.find("#taskFilters>input[name=completed]").checked;
      const filters = { projectId, completed };

      // Update query parms for list
      let listPath = "/tasks/list?";
      for (let [k, v] of Object.entries(filters)) {
        listPath += `${k}=${v}&`
      }
      const taskList = htmx.find("#taskList");
      taskList.setAttribute("hx-get", listPath);
      htmx.process(taskList);

      // Prefill projectId on newTask form
      const newPath = "/tasks/new?projectId=" + projectId;
      const taskNew = htmx.find("#taskNew");
      taskNew.setAttribute("hx-get", newPath);
      htmx.process(taskNew);

      form.dispatchEvent(new Event("taskFilterChange"));
    }
  </script>
}


templ TaskRows(tasks []domain.Task) {
  for _, task := range tasks {
    <div id={ fmt.Sprintf("task-%d", task.Id) }>
      <div hx-get={ fmt.Sprintf("/tasks/%d", task.Id) }  hx-target="#taskForm">
        <h4>{ task.Title }</h4>
      </div>
      if task.DueDate != nil {
        <p>Due: { task.DueDateStr() }</p>
      }
      if !task.Done() {
        <button
          hx-post={ fmt.Sprintf("/tasks/%d/complete", task.Id) }
          hx-on::after-request="this.parentElement.remove();"
        >✅</button>
      }
      <button
        hx-delete={ fmt.Sprintf("/tasks/%d", task.Id) }
        hx-confirm="Are you sure you want to delete this task?"
        hx-on::after-request="this.parentElement.remove();"
      >❌</button>
      <hr />
    </div>
  }
}

templ TaskForm(task domain.Task, projects []domain.Project) {
  <div id="taskForm">
    <div class="overlay">
      if task.Id == 0 {
        <form
          hx-post="/tasks"
          hx-target="#taskList"
          hx-swap="beforeend"
          hx-on::after-request="document.getElementById('taskForm').innerHTML='';"
        >
          @TaskFields(task, task.GetRecurPolicy(), projects)
          <br />
          <button type="submit">Create</button>
        </form>
      } else {
        <form
          hx-put={ fmt.Sprintf("/tasks/%d", task.Id) }
          hx-target={ fmt.Sprintf("#task-%d", task.Id) }
          hx-on::after-request="document.getElementById('taskForm').innerHTML='';"
        >
          @TaskFields(task, task.GetRecurPolicy(), projects)
          <br />
          <button type="submit">Save</button>
        </form>
      }
      <button hx-on:click="document.getElementById('taskForm').innerHTML='';">Cancel</button>
    </div>
  </div>
}

templ TaskFields(task domain.Task, recurPolicy *domain.RecurPolicy, projects []domain.Project) {
    <label>Title</label>
    <input type="text" name="title" value={ task.Title } />

    <label>Project</label>
    <select name="projectId">
      <option value=""></option>
      for _, project := range projects {
        <option value={ fmt.Sprintf("%d", project.Id) }
          selected?={ task.ProjectId != nil && *task.ProjectId == project.Id }
        >{ project.Name }</option>
      }
    </select>

    <label>Description</label>
    if task.Description != nil {
      <textarea rows="4" name="description">{ *task.Description }</textarea>
    } else {
      <textarea rows="4" name="description"></textarea>
    }

    <label>DueDate</label>
    <input type="date" name="dueDate"
      if task.DueDate != nil {
        value={ task.DueDateStr() }
      }
    />

    <label>Repeat?</label>
    <select name="recurPolicyType">
      <option value="">No Repeat</option>
      <option value={ domain.RPDaysAfterComplete }
        selected?={ recurPolicy != nil && recurPolicy.Type == domain.RPDaysAfterComplete }
      >Days After Completion</option>
      <option value={ domain.RPDayOfMonth }
        selected?={ recurPolicy != nil && recurPolicy.Type == domain.RPDayOfMonth }
      >Day of Month</option>
    </select>
    <input type="number" name="recurPolicyN"
      if recurPolicy != nil {
        value={ fmt.Sprintf("%d", recurPolicy.N) }
      }
    />
}
